//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication_VIA_Cinema.ViaCinemaServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ViaCinemaServiceReference.IViaCinemaService")]
    public interface IViaCinemaService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IViaCinemaService/GetAllMovies", ReplyAction="http://tempuri.org/IViaCinemaService/GetAllMoviesResponse")]
        VIA_Cinema.MovieModel.Movie[] GetAllMovies();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IViaCinemaService/GetAllMovies", ReplyAction="http://tempuri.org/IViaCinemaService/GetAllMoviesResponse")]
        System.Threading.Tasks.Task<VIA_Cinema.MovieModel.Movie[]> GetAllMoviesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IViaCinemaService/Login", ReplyAction="http://tempuri.org/IViaCinemaService/LoginResponse")]
        bool Login(string email, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IViaCinemaService/Login", ReplyAction="http://tempuri.org/IViaCinemaService/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(string email, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IViaCinemaService/GetAllProjections", ReplyAction="http://tempuri.org/IViaCinemaService/GetAllProjectionsResponse")]
        VIA_Cinema.ProjectionModel.Projection[] GetAllProjections();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IViaCinemaService/GetAllProjections", ReplyAction="http://tempuri.org/IViaCinemaService/GetAllProjectionsResponse")]
        System.Threading.Tasks.Task<VIA_Cinema.ProjectionModel.Projection[]> GetAllProjectionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IViaCinemaService/CreateAccount", ReplyAction="http://tempuri.org/IViaCinemaService/CreateAccountResponse")]
        VIA_Cinema.UserAccountModel.UserAccount CreateAccount(string email, string userPassword, string firstName, string lastName, int dayOfBirth, int monthOfBirth, int yearOfBirth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IViaCinemaService/CreateAccount", ReplyAction="http://tempuri.org/IViaCinemaService/CreateAccountResponse")]
        System.Threading.Tasks.Task<VIA_Cinema.UserAccountModel.UserAccount> CreateAccountAsync(string email, string userPassword, string firstName, string lastName, int dayOfBirth, int monthOfBirth, int yearOfBirth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IViaCinemaService/GetProjections", ReplyAction="http://tempuri.org/IViaCinemaService/GetProjectionsResponse")]
        VIA_Cinema.ProjectionModel.Projection[] GetProjections(string movieName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IViaCinemaService/GetProjections", ReplyAction="http://tempuri.org/IViaCinemaService/GetProjectionsResponse")]
        System.Threading.Tasks.Task<VIA_Cinema.ProjectionModel.Projection[]> GetProjectionsAsync(string movieName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IViaCinemaService/BookSeat", ReplyAction="http://tempuri.org/IViaCinemaService/BookSeatResponse")]
        bool BookSeat(int projectionId, string email, string seatNumbers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IViaCinemaService/BookSeat", ReplyAction="http://tempuri.org/IViaCinemaService/BookSeatResponse")]
        System.Threading.Tasks.Task<bool> BookSeatAsync(int projectionId, string email, string seatNumbers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IViaCinemaService/UserExists", ReplyAction="http://tempuri.org/IViaCinemaService/UserExistsResponse")]
        bool UserExists(string userEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IViaCinemaService/UserExists", ReplyAction="http://tempuri.org/IViaCinemaService/UserExistsResponse")]
        System.Threading.Tasks.Task<bool> UserExistsAsync(string userEmail);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IViaCinemaServiceChannel : WebApplication_VIA_Cinema.ViaCinemaServiceReference.IViaCinemaService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ViaCinemaServiceClient : System.ServiceModel.ClientBase<WebApplication_VIA_Cinema.ViaCinemaServiceReference.IViaCinemaService>, WebApplication_VIA_Cinema.ViaCinemaServiceReference.IViaCinemaService {
        
        public ViaCinemaServiceClient() {
        }
        
        public ViaCinemaServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ViaCinemaServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ViaCinemaServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ViaCinemaServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public VIA_Cinema.MovieModel.Movie[] GetAllMovies() {
            return base.Channel.GetAllMovies();
        }
        
        public System.Threading.Tasks.Task<VIA_Cinema.MovieModel.Movie[]> GetAllMoviesAsync() {
            return base.Channel.GetAllMoviesAsync();
        }
        
        public bool Login(string email, string userPassword) {
            return base.Channel.Login(email, userPassword);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(string email, string userPassword) {
            return base.Channel.LoginAsync(email, userPassword);
        }
        
        public VIA_Cinema.ProjectionModel.Projection[] GetAllProjections() {
            return base.Channel.GetAllProjections();
        }
        
        public System.Threading.Tasks.Task<VIA_Cinema.ProjectionModel.Projection[]> GetAllProjectionsAsync() {
            return base.Channel.GetAllProjectionsAsync();
        }
        
        public VIA_Cinema.UserAccountModel.UserAccount CreateAccount(string email, string userPassword, string firstName, string lastName, int dayOfBirth, int monthOfBirth, int yearOfBirth) {
            return base.Channel.CreateAccount(email, userPassword, firstName, lastName, dayOfBirth, monthOfBirth, yearOfBirth);
        }
        
        public System.Threading.Tasks.Task<VIA_Cinema.UserAccountModel.UserAccount> CreateAccountAsync(string email, string userPassword, string firstName, string lastName, int dayOfBirth, int monthOfBirth, int yearOfBirth) {
            return base.Channel.CreateAccountAsync(email, userPassword, firstName, lastName, dayOfBirth, monthOfBirth, yearOfBirth);
        }
        
        public VIA_Cinema.ProjectionModel.Projection[] GetProjections(string movieName) {
            return base.Channel.GetProjections(movieName);
        }
        
        public System.Threading.Tasks.Task<VIA_Cinema.ProjectionModel.Projection[]> GetProjectionsAsync(string movieName) {
            return base.Channel.GetProjectionsAsync(movieName);
        }
        
        public bool BookSeat(int projectionId, string email, string seatNumbers) {
            return base.Channel.BookSeat(projectionId, email, seatNumbers);
        }
        
        public System.Threading.Tasks.Task<bool> BookSeatAsync(int projectionId, string email, string seatNumbers) {
            return base.Channel.BookSeatAsync(projectionId, email, seatNumbers);
        }
        
        public bool UserExists(string userEmail) {
            return base.Channel.UserExists(userEmail);
        }
        
        public System.Threading.Tasks.Task<bool> UserExistsAsync(string userEmail) {
            return base.Channel.UserExistsAsync(userEmail);
        }
    }
}
